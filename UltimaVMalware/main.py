# Variable that will store the SAVED.GAM directory
directory = "C:\\Users\\Kevin\\Desktop\\Lab2DOSBox\\Ultima_5\\SAVED.GAM"


# Main function that is responsible for asking the user which option the user wants
def main():
    # Print simple message about what the system is about
    print("Hex Modification System")

    # List that stores the maximum stat of each attribute in this order: Strength, Dexterity, Intelligence, Current HP, Maximum HP, EXP
    maxixumAttribute = [99, 99, 99, 99, 999, 999, 9999]

    # List that stores the maximum of each item in this order: Gold, Keys, Skull Keys, Gems, Badges, Magic Carpets, Magic Axes
    maximumItems = [9999, 100, 100, 100, 1, 100, 100]

    # Boolean variable that will allow the while loop to run until the user chooses option 3
    isTrue = True

    # While loop that loops until isTrue is false (in this case, option 3)
    while isTrue:
        # Calls the menu function that displays the list of options to the user
        menu()

        # Asks the user to enter their choice. Option ranges from 1 to 3
        menuChoice = int(input("Enter your choice: "))

        # If the user chooses option 1, it will allow the user to change a stat for a specific character
        if menuChoice == 1:
            # Calls characters menu function that is responsible for displaying the list of characters
            charactersMenu()

            # temp boolean variable used to make sure the user is typing an integer between 1 and 16
            tempCharacterBool = True

            while tempCharacterBool:
                # Asks the user to enter an integer ranging from 1 to 16
                characterChoice = int(input("Enter an integer from 1 to 16: "))

                # If statement that checks if character choice is in range of the 16 characters in game by calling
                # the inRangeChecker that sends the character choice and the number of possible options as parameters
                if inRangeChecker(characterChoice, 16):
                    # Sets the temporary boolean to false, therefore terminating the while loop
                    tempCharacterBool = False

                # If number is out of range, it'll enter this else statement
                else:
                    # Print error message
                    print("Number is out of range, please try again.")

            # Calls the character stats menu function that will display a list of stat options that user can change
            characterStatsMenu()

            # Temp boolean variable that will be used if the stat choice is in range of 1 to 7
            tempStatBool = True

            while tempStatBool:
                # Asks the user to enter an integer ranging from 1 to 7
                characterStatsChoice = int(input("Enter an integer from 1 to 8: "))

                # If statement that checks if stat choice is in range of the 7 stats in game by calling
                # the inRangeChecker that sends the stat choice and the number of possible options as parameters
                if inRangeChecker(characterStatsChoice, 8):
                    # Sets the temporary boolean to false, therefore terminating the while loop
                    tempStatBool = False
                else:
                    #Print error message
                    print("Number is out of range, please try again.")

            # If user chooses the option to max all attributes, it will enter this if statement
            if characterStatsChoice == 8:
                # Calls the maximum character stats function sending character choice to the functnion
                maxCharacterStats(characterChoice)

            else:
                # Temp boolean variable that will be used if the stat choice is in range of 1 to 7
                statValueCheckerBool = True

                while statValueCheckerBool:
                    # Asks the user to enter the new number for the specific stat
                    newAmount = int(input("Enter new amount: "))

                    # If statement that checks if value is in range of the maximum stat
                    if newAmount == 8 or dataChecker(newAmount, maxixumAttribute[characterStatsChoice - 1]):
                        statValueCheckerBool = False
                    else:
                        # Print an error message telling the user to reenter an integer
                        print("Number is out of range, please try again.")

                # Calls the changeStats function which sends 3 arguments to the function: the character the user chose,
                # the stat the user wants to change, and the new stat number
                changeStats(characterChoice, characterStatsChoice, newAmount)

        # If the user chooses option 2, it will allow the user to add item(s) to the character's inventory
        elif menuChoice == 2:
            # Calls the character items menu function that is responsible for displaying the list of items that user can
            # add or remove
            characterItemsMenu()

            # Temp boolean variable that will be used if the item choice is in range of 1 to 8
            tempItemChoiceBool = True

            # While loop that will loop until the user enters in a valid integer in range
            while tempItemChoiceBool:
                # Asks the user to enter an integer ranging from 1 to 8
                characterItemsChoice = int(input("Enter an integer from 1 to 7: "))

                # If the value that the user typed in is in range the program will initialize the temp boolean to False
                # therefore terminating the loop
                if inRangeChecker(characterItemsChoice, 7):
                    # Initializes the temp boolean variable to false
                    tempItemChoiceBool = False

                # If the value is not in range, it'll enter this else statement
                else:
                    # Print an error message telling the user to reenter an integer
                    print("Number is out of range, please try again.")

            # Temp boolean variable used to check if integer the user enters meets the range
            tempItemAmountBool = True

            # While loop that loops until a valid amount is entered
            while tempItemAmountBool:
                # Asks the user to enter the item count
                newAmount = int(input("Enter new amount: "))

                # If statement that checks if the new amount is in range
                if dataChecker(newAmount, maximumItems[characterItemsChoice - 1]):
                    # If integer is in range, set the temp boolean to false resulting in the termination of the while loop
                    tempItemAmountBool = False

                # If number is out of range, it will enter this else statement
                else:
                    # Print out of range error message
                    print("Number is out of range, please try again.")

            # Calls the change item function sending the item choice and new item count as arguments
            changeItem(characterItemsChoice, newAmount)

        # If the user chooses option 3, it will display an exit message and will set the isTrue boolean to false,
        # therefore terminating the while loop
        elif menuChoice == 3:
            # Print exit message
            print("Exiting the Hex Modification System")

            # Sets boolean to false to terminate the loop
            isTrue = False

        # If user enters in an invalid choice, it will enter this else statement
        else:
            # Print invalid choice message
            print("Invalid choice, try again.")


# changeStats function that has the type of character, stat the user wants to change, and the new stat count as
# parameters
def changeStats(characterType, statType, newAmount):
    # If the stat attribute the use wants to edit is current health, maximum health, and exp, to_bytes will have a size of 2
    if statType >= 5:
        # Uses to to_bytes python function to an array of bytes in little endian of size 2
        newAmount = newAmount.to_bytes(2, byteorder="little")

    # If the user wants to change strength, dexterity, intelligence, or magic. It will enter this else statement
    else:
        # Uses to to_bytes python function to an array of bytes in little endian of size 1
        newAmount = newAmount.to_bytes(1, byteorder="little")

    # openSavedGAM variable that is responsible for opening the directory which will allow to read and write to the file
    openSavedGAM = open(directory, 'r+b')

    # Decimal values of the stats offset. If we convert the decimal values to hex. We get 0x0E, 0x0F, 0x10, 0x12, 0x14, 0x16
    # 0x0E = Strength Offset
    # 0x0F = Dexterity Offset
    # 0x10 = Intelligence Offset
    # 0x11 = Magic Offset
    # 0x12 = Current HP Offset
    # 0x14 = Maximum HP Offset
    # 0x16 = EXP Offset
    # Stored in a list
    initialStats = [14, 15, 16, 17, 18, 20, 22]

    # If the user chooses the main character (Kevin), it'll enter this if statement
    if characterType == 1:
        # Since Python uses zero-based number for arrays, we have to subtract the statType (user choice) by 1 to grab the correct stat
        # In this case, we'll be doing 1 - 0 which is 14(Hex: 0x0E) allowing to change the strength. .Seek will set the position of the strength offset
        openSavedGAM.seek(initialStats[statType - 1])

        # Overwrite the existing content in the strength offset with the new amount
        openSavedGAM.write(newAmount)

    # If the user does not choose the main character, it'll enter this off statement
    else:
        # Similarly to the if statement above, this one subtracts 1 because arrays are zero-based. However, this time
        # the program will do 32 * characterType - 1 due to the pattern I found. Let's say the main character offset is 14 (decimal)
        # If we add 32 to 14, we get 46. Convert 46 to hex, we get 0x2E which is the strength offset for the next character.
        # This allowed me to create easily navigate and modify the value of each character.
        openSavedGAM.seek(initialStats[statType - 1] + (32 * (characterType - 1)))

        # Overwrite the existing content in the stat offset with the new amount
        openSavedGAM.write(newAmount)

    # Closes the file
    openSavedGAM.close()


# changeItem function contain two parameters, one for the item the user wants to change and the new amount the new item
# will contain
def changeItem(itemChoice, newAmount):
    # Items that were specified by the professor. The values are the decimal values of each item
    # 516 = 0x0204 = Gold
    # 518 = 0x0206 = Keys
    # 523 = 0x020B = Skull Keys
    # 519 = 0x0207 = Gems
    # 536 = 0x0218 = Black Badge
    # 522 = 0x020A = Magic Carpets
    # 576 = 0x0240 = Magic Axes
    itemChoicesDecimal = [516, 518, 523, 519, 536, 522, 576]

    # Integer variable that is used if the item choice is 5 (black badges). This integer will be used to check if the
    # user wants to have 1 black badge
    tempAmount = newAmount

    # If the item choice is 1 (gold) then there is a possibility that the newAmount is greater than 255 so I made the
    # byte size 2 and set it to little endian
    if itemChoice == 1:
        # Use to to_bytes function provided by python to get an array of bytes of size 2
        newAmount = newAmount.to_bytes(2, byteorder="little")

    # If the item choice is not gold, it'll enter this statement
    else:
        # Use to to_bytes function provided by python to get an array of bytes of size 1
        newAmount = newAmount.to_bytes(1, byteorder="little")

    # openSavedGAM variable that is responsible for opening the directory which will allow to read and write to the file
    openSavedGAM = open(directory, 'r+b')

    # Uses the .seek function to set the file's current position at the specified offset
    openSavedGAM.seek(itemChoicesDecimal[itemChoice - 1])

    # If the user wants to change black badge and puts 1 quantity, it will enter this if statement
    # 00 = No, Black Badge
    # FF = Yes, Black Badge
    if itemChoice == 5 and tempAmount == 1:
        # newAmount is initialized to 255 (FF in hex)
        newAmount = 255

        # Uses to to_bytes python function to an array of bytes in little endian of size 1
        newAmount = newAmount.to_bytes(1, byteorder="little")

        # Writes the new amount into the current offset
        openSavedGAM.write(newAmount)
    else:
        # Replaces the old value with the new value that was provided by the user in the current offset
        openSavedGAM.write(newAmount)

    # Closes the opened file
    openSavedGAM.close()


def maxCharacterStats(characterType):
    # openSavedGAM variable that is responsible for opening the directory which will allow to read and write to the file
    openSavedGAM = open(directory, 'r+b')

    # Decimal values of the stats offset. If we convert the decimal values to hex. We get 0x0E, 0x0F, 0x10, 0x12, 0x14, 0x16
    # 14 = 0x0E = Strength Offset
    # 15 = 0x0F = Dexterity Offset
    # 16 = 0x10 = Intelligence Offset
    # 17 = 0x11 = Magic Offset
    # 18 = 0x12 = Current HP Offset
    # 20 = 0x14 = Maximum HP Offset
    # 22 = 0x16 = EXP Offset
    # Stored in a list
    initialStats = [14, 15, 16, 17, 18, 20, 22]

    # If the character is not the main character (Kevin), it will enter this if statement
    if characterType <= 16:
        # For loop that loops until it reaches the length of the array
        for index in range(len(initialStats)):
            # If the index of the array offset contains the strength, dexterity, or intelligence (0x0E, 0x0F, 0x010),
            # It will enter this if statement
            if initialStats[index] <= 17:
                # Sets the new amount to 99, the value given by Professor Giacalone
                newAmount = 99

                # Since the number is less than 255, the byte size will be 1 and it will be formatted in little endian
                newAmount = newAmount.to_bytes(1, byteorder="little")

                # Similarly to the if statement above, this one subtracts 1 because arrays are zero-based. However, this time
                # the program will do 32 * characterType - 1 due to the pattern I found. Let's say the main character offset is 14 (decimal)
                # If we add 32 to 14, we get 46. Convert 46 to hex, we get 0x2E which is the strength offset for the next character.
                # This allowed me to create easily navigate and modify the value of each character.
                openSavedGAM.seek(initialStats[index] + (32 * (characterType - 1)))

                # Overwrite the existing content in the stat offset with the new amount
                openSavedGAM.write(newAmount)

            # If the index of the array offset contains the current HP or maximum HP (0x12 or 0x14), it will enter this
            elif initialStats[index] == 18 or initialStats[index] == 20:
                # Sets the new amount to 999, the value given by Professor Giacalone
                newAmount = 999

                # Since the number is greater than 255, the byte size will be 2 and it will be formatted in little endian
                newAmount = newAmount.to_bytes(2, byteorder="little")

                # Similarly to the if statement above, this one subtracts 1 because arrays are zero-based. However, this time
                # the program will do 32 * characterType - 1 due to the pattern I found. Let's say the main character offset is 14 (decimal)
                # If we add 32 to 14, we get 46. Convert 46 to hex, we get 0x2E which is the strength offset for the next character.
                # This allowed me to create easily navigate and modify the value of each character.
                openSavedGAM.seek(initialStats[index] + (32 * (characterType - 1)))

                # Overwrite the existing content in the stat offset with the new amount
                openSavedGAM.write(newAmount)

            # Will enter this else statement if it the offset is Maximum HP or EXP (0x14, 0x16)
            else:
                # Sets the new amount to 9999, the value given by Professor Giacalone
                newAmount = 9999

                # Since the number is greater than 255, the byte size will be 2 and it will be formatted in little endian
                newAmount = newAmount.to_bytes(2, byteorder="little")

                # Similarly to the if statement above, this one subtracts 1 because arrays are zero-based. However, this time
                # the program will do 32 * characterType - 1 due to the pattern I found. Let's say the main character offset is 14 (decimal)
                # If we add 32 to 14, we get 46. Convert 46 to hex, we get 0x2E which is the strength offset for the next character.
                # This allowed me to create easily navigate and modify the value of each character.
                openSavedGAM.seek(initialStats[index] + (32 * (characterType - 1)))

                # Overwrite the existing content in the stat offset with the new amount
                openSavedGAM.write(newAmount)

    # Closes the file
    openSavedGAM.close()

# dataChecker function takes in the new value wants to input and maximum value that system will allow
# This function is responsible for checking if the value is in range (0 to n)
def dataChecker(userValue, maximumValue):
    # If value is in range, it will enter this if statement
    if 0 <= userValue <= maximumValue:
        # Returns true to the caller
        return True

    # If the value is out of range, it will enter this else statement
    else:
        # Return false to the caller
        return False

# inRangeChecker function takes in the new value wants to input and maximum value that system will allow
# This function is responsible for checking if the value is in range (1 to n)
def inRangeChecker(userValue, maximumValue):
    # If value is in range, it will enter this if statement
    if 0 < userValue <= maximumValue:
        # Returns true to the caller
        return True

    # If the value is out of range, it will enter this else statement
    else:
        # Return false to the caller
        return False


# charactersMenu function that is responsible for displaying the list of names (characters) to the user
def charactersMenu():
    # Prints character options
    print("\nPlease choose the character you want: ",
          "1) Main Character",
          "2) Shamino",
          "3) Iolo",
          "4) Mariah",
          "5) Geoffrey",
          "6) Jaana",
          "7) Julia",
          "8) Dupre",
          "9) Katrina",
          "10) Sentri",
          "11) Gwenno",
          "12) Johne",
          "13) Gorn",
          "14) Maxwell",
          "15) Toshi",
          "16) Saduj", sep="\n")


# characterStatsMenu function is responsible for displaying the list of stat option the user can change
def characterStatsMenu():
    # Prints attribute options
    print("\nPlease choose an option listed below: ",
          "1) Change character's strength (0-99)",
          "2) Change character's dexterity (0-99)",
          "3) Change character's intelligence (0-99)",
          "4) Change character's magic (0-99)",
          "5) Change character's current health (0-999)",
          "6) Change character's maximum health (0-999)",
          "7) Change character's exp (0-9999)",
          "8) Max all stats for the character", sep="\n")


# characterItemsMenu function is responsible for displaying the list of items the user can change
def characterItemsMenu():
    # Prints items options
    print("\nPlease choose an option listed below: ",
          "1) Change character's amount of gold (0-9999)",
          "2) Change character's amount of key(s) (0-100)",
          "3) Change character's amount of skull keys (0-100)",
          "4) Change character's amount of gem(s) (0-100)",
          "5) Change character's amount of badge(s) (0-1)",
          "6) Change character's amount of magic carpet(s) (0-100)",
          "7) Change character's amount of magic axe(s) (0-100)", sep="\n")


# Menu function that gives the user three options to choose from: Change character stats, change item count, or exit
def menu():
    # Prints change stats or change items options
    print("\nPlease choose an option listed below: ",
          "1) Change character stats",
          "2) Change amount of items in character's inventory",
          "3) Exit the program", sep="\n")


# Calls the main function that is responsible for the entire program
main()
